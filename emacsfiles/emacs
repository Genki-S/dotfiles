; Vim is my first finger language
(add-to-list 'load-path "~/.mybundles/evil")
(add-to-list 'load-path "~/.mybundles/evil-leader")
(require 'evil)
(require 'evil-leader)
(evil-mode 1)
(global-evil-leader-mode)
(evil-leader/set-leader ",")

(define-key global-map
  "\C-h" 'delete-backward-char
  )

; org mappings
;; global
(evil-define-key 'normal global-map
  "zc" 'org-cycle
  "zC" 'org-global-cycle
  )

;; with <Leader>
(evil-leader/set-key
  "c" (lambda () (interactive) (org-capture nil "c"))
  "t" 'org-todo
  "r" 'org-refile
  "a" 'org-archive-subtree
  "o" 'org-insert-todo-heading-respect-content
  ">" 'org-do-demote
  "<" 'org-do-promote
  "C-h" 'org-promote-subtree
  "C-l" 'org-demote-subtree
  "C-k" 'org-move-subtree-up
  "C-j" 'org-move-subtree-down
  ; Scheduling
  "ss" 'org-schedule
  "sd" 'org-deadline
  ; Clocking
  "ki" 'org-clock-in
  "ko" 'org-clock-out
  ; Views
  "A" 'org-agenda-list
  )

; package settings
(package-initialize)
(require 'package )
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(require 'org)
(require 'org-install)
(add-to-list 'org-modules 'org-habit)

; variables
(setq org-directory "~/org")
(setq gtd-inbox (concat org-directory "/inbox.org"))
(setq gtd-tasks (concat org-directory "/tasks.org"))
(setq gtd-habit (concat org-directory "/habit.org"))
(setq gtd-goal (concat org-directory "/goal.org"))

(setq org-agenda-files
      (list gtd-inbox gtd-tasks gtd-habit gtd-goal))
(setq org-todo-keywords
      '((sequence "CAPTURED(c)" "NEXT(n)" "SOMEDAY(s)" "|" "DONE(d)" "DELEGATED(l)" "CANCELED(C)" )
        (sequence "GOAL(g)" "PROCESS(p)" "|" "ACHIEVED(a)" "STEPUP(u)" )))
(setq org-tag-alist
      '(("@home" . ?h) ("@errand" . ?e ) ("@univ" . ?u )))
(setq org-todo-repeat-to-state "NEXT")

; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

; org-capture
(setq org-default-notes-file gtd-inbox)
(setq org-capture-templates
      '(("c" "Capture" entry (file gtd-inbox)
         "* CAPTURED %?\n  %U\n  %a")))

; MobileOrg
(require 'org-mobile )
(setq org-mobile-directory "~/Dropbox/MobileOrg")
(setq org-mobile-inbox-for-pull (concat org-directory "mobile_pull.org"))

;; auto push
(defvar org-mobile-push-timer nil
  "Timer that `org-mobile-push-timer' used to reschedule itself, or nil.")

(defun org-mobile-push-with-delay (secs)
  (when org-mobile-push-timer
    (cancel-timer org-mobile-push-timer))
  (setq org-mobile-push-timer
        (run-with-idle-timer
         (* 1 secs) nil 'org-mobile-push)))

(add-hook 'after-save-hook
 (lambda ()
   (when (eq major-mode 'org-mode)
     (dolist (file (org-mobile-files-alist))
      (if (string= (file-truename (expand-file-name (car file)))
		   (file-truename (buffer-file-name)))
           (org-mobile-push-with-delay 30)))
   )))

(run-at-time "00:05" 86400 '(lambda () (org-mobile-push-with-delay 1))) ;; refreshes agenda file each day

;; auto pull
(org-mobile-pull) ;; run org-mobile-pull at startup

(defun install-monitor (file secs)
  (run-with-timer
   0 secs
   (lambda (f p)
     (unless (< p (second (time-since (elt (file-attributes f) 5))))
       (org-mobile-pull)))
   file secs))

(install-monitor (file-truename
                  (concat
                   (file-name-as-directory org-mobile-directory)
                          org-mobile-capture-file))
                 5)

;; Do a pull every 5 minutes to circumvent problems with timestamping
;; (ie. dropbox bugs)
(run-with-timer 0 (* 5 60) 'org-mobile-pull)

; vim: set filetype=lisp:
