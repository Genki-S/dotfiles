(package-initialize)
(require 'package)

(require 'ido)
(ido-mode t)

(require 'calendar)

; Org settings
; ============
(add-to-list 'load-path (expand-file-name "~/dotfiles/submodules/org-mode/lisp"))
(add-to-list 'load-path (expand-file-name "~/dotfiles/submodules/org-mode/contrib/lisp"))
(require 'org)
(require 'org-checklist)

; key settings
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

; variables
(setq org-directory "~/org")
; gtd is not strictly following the GTD book, I am tweaking
(setq gtd-inbox (concat org-directory "/inbox.org"))
(setq gtd-next (concat org-directory "/next.org"))
(setq gtd-someday (concat org-directory "/someday.org"))
(setq gtd-projects (concat org-directory "/projects.org"))
(setq gtd-routines (concat org-directory "/routines.org"))
(setq file-journal (concat org-directory "/journal.org"))
(setq file-workouts (concat org-directory "/workouts.org"))

; org settings
(setq org-catch-invisible-edits t)
(setq org-startup-indented t)
(setq org-log-into-drawer "LOGBOOK")
(setq org-clock-into-drawer t)
(setq org-columns-default-format "%40ITEM %10TODO %5Effort(Effort) %CLOCKSUM")

(setq org-agenda-files
      (list gtd-inbox gtd-next gtd-someday gtd-projects gtd-routines file-workouts))

; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

; provide refile targets as paths, including the file name (without directory) as level 1 of the path
(setq org-refile-use-outline-path 'file)

; Targets complete directly with IDO
(setq org-completion-use-ido t)
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

; allow to create new nodes (must be confirmed by the user) as refile targets
(setq org-refile-allow-creating-parent-nodes 'confirm)

; org-capture
(setq org-default-notes-file gtd-inbox)
(setq org-capture-templates
      '(("t" "Todo" entry (file gtd-inbox)
         "* TODO %?\n%U\nfrom:%a\n")
        ("m" "Meeting" entry (file gtd-inbox)
         "* MEETING %?\n%U\n" :clock-in t :clock-resume t)
        ("n" "Note" entry (file gtd-inbox)
         "* %? :note:\n%U\nfrom:%a\n" :clock-in t :clock-resume t)
        ("p" "Phone call" entry (file gtd-inbox)
         "* PHONE %?\n%U" :clock-in t :clock-resume t)
        ("j" "Journal" entry (file+datetree file-journal)
         (file "~/org/templates/journal.txt"))))

; todo keywords (http://doc.norang.ca/org-mode.html)
(setq org-use-fast-todo-selection t)
(setq org-treat-S-cursor-todo-selection-as-state-change nil)

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "red" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))

; Org-babel
(org-babel-do-load-languages
  'org-babel-load-languages
  '(;; other Babel languages
    (plantuml . t)))

(setq org-plantuml-jar-path
      (expand-file-name "~/jar/plantuml.jar"))

; Writing
; ============
; reftex (http://nakkaya.com/2010/09/07/writing-papers-using-org-mode/)
(setq reftex-default-bibliography
      (quote ("~/reftex.bib")))

(defun na-org-mode-reftex-setup ()
  (interactive)
  (load-library "reftex")
  (and (buffer-file-name)
       (file-exists-p (buffer-file-name))
       (reftex-parse-all)))

(add-hook 'org-mode-hook 'na-org-mode-reftex-setup)

; vim: set filetype=lisp:
